{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, withModifiers as _withModifiers, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"login-container\"\n};\nconst _hoisted_2 = {\n  class: \"login-box\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_cache[4] || (_cache[4] = _createElementVNode(\"h1\", null, \"登录\", -1 /* HOISTED */)), _createElementVNode(\"form\", {\n    onSubmit: _cache[2] || (_cache[2] = _withModifiers((...args) => $options.loginUser && $options.loginUser(...args), [\"prevent\"])),\n    class: \"login-form\"\n  }, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.username = $event),\n    placeholder: \"UserName\",\n    class: \"input-field\",\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.username]]), _withDirectives(_createElementVNode(\"input\", {\n    type: \"password\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.password = $event),\n    placeholder: \"PassWord\",\n    class: \"input-field\",\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.password]]), _cache[3] || (_cache[3] = _createElementVNode(\"button\", {\n    type: \"submit\",\n    class: \"login-btn\"\n  }, \"登录\", -1 /* HOISTED */))], 32 /* NEED_HYDRATION */)])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","onSubmit","_cache","_withModifiers","args","$options","loginUser","type","$event","$data","username","placeholder","required","password"],"sources":["/home/xuan/selfwork/frontend/src/views/Login_fuc.vue"],"sourcesContent":["/* eslint-disable */\n<template>\n  <div class=\"login-container\">\n    <div class=\"login-box\">\n      <h1>登录</h1>\n      <form @submit.prevent=\"loginUser\" class=\"login-form\">\n        <input\n          type=\"text\" \n          v-model=\"username\" \n          placeholder=\"UserName\"\n          class=\"input-field\"\n          required\n        />\n        <input\n          type=\"password\"\n          v-model=\"password\"\n          placeholder=\"PassWord\"\n          class=\"input-field\"\n          required\n        />\n        <button type=\"submit\" class=\"login-btn\">登录</button>\n      </form>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      username: '',\n      password: ''\n    };\n  },\n  methods: {\n    async loginUser() {\n      try {\n        // 使用 Axios 发送 POST 请求到后端进行用户验证\n        const response = await axios.post('http://localhost:5000/api/users/login1', {\n          username: this.username,\n          password: this.password\n        });\n        console.log('完整的响应对象:', response);\n        // 如果后端返回成功，跳转到数据展示页面\n        if (response.data.success) {\n          this.$router.push('/data');\n        } else {\n          // 后端返回用户不存在，弹出提示\n          alert('用户不存在，请先注册');\n        }\n      } catch (error) {\n        // 处理请求错误或后端错误响应\n        console.error('登录请求失败', error);\n        alert(`登录失败: ${error.message}`);\n      }\n    }\n  }\n};\n</script>\n\n<style scoped>\n/* 登录页面的容器居中显示 */\n.login-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 50vh; /* 占满整个视口的高度 */\n  background-color: #f5f5f5;\n  font-family: 'Arial', sans-serif;\n}\n\n/* 登录框样式 */\n.login-box {\n  background-color: #fff;\n  padding: 40px;\n  border-radius: 10px;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n  text-align: center;\n  width: 100%;\n  max-width: 400px;\n}\n\n/* 标题样式 */\nh1 {\n  font-size: 2rem;\n  color: #333;\n  margin-bottom: 20px;\n}\n\n/* 输入框样式 */\n.input-field {\n  width: 100%;\n  padding: 15px;\n  margin: 10px 0;\n  border-radius: 5px;\n  border: 1px solid #ccc;\n  font-size: 1rem;\n}\n\n/* 输入框获取焦点时的样式 */\n.input-field:focus {\n  border-color: #4CAF50;\n  outline: none;\n}\n\n/* 登录按钮样式 */\n.login-btn {\n  width: 100%;\n  padding: 15px;\n  background-color: #4CAF50;\n  color: white;\n  font-size: 1rem;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n  transition: background-color 0.3s ease;\n}\n\n/* 按钮悬停样式 */\n.login-btn:hover {\n  background-color: #45a049;\n}\n\n/* 调整页面在小屏设备上的显示效果 */\n@media (max-width: 500px) {\n  .login-box {\n    padding: 20px;\n  }\n\n  .input-field {\n    padding: 12px;\n  }\n\n  .login-btn {\n    padding: 12px;\n  }\n}\n</style>\n"],"mappings":";;EAEOA,KAAK,EAAC;AAAiB;;EACrBA,KAAK,EAAC;AAAW;;uBADxBC,mBAAA,CAqBM,OArBNC,UAqBM,GApBJC,mBAAA,CAmBM,OAnBNC,UAmBM,G,0BAlBJD,mBAAA,CAAW,YAAP,IAAE,sBACNA,mBAAA,CAgBO;IAhBAE,QAAM,EAAAC,MAAA,QAAAA,MAAA,MALnBC,cAAA,KAAAC,IAAA,KAK6BC,QAAA,CAAAC,SAAA,IAAAD,QAAA,CAAAC,SAAA,IAAAF,IAAA,CAAS;IAAER,KAAK,EAAC;sBACtCG,mBAAA,CAME;IALAQ,IAAI,EAAC,MAAM;IAPrB,uBAAAL,MAAA,QAAAA,MAAA,MAAAM,MAAA,IAQmBC,KAAA,CAAAC,QAAQ,GAAAF,MAAA;IACjBG,WAAW,EAAC,UAAU;IACtBf,KAAK,EAAC,aAAa;IACnBgB,QAAQ,EAAR;iDAHSH,KAAA,CAAAC,QAAQ,E,mBAKnBX,mBAAA,CAME;IALAQ,IAAI,EAAC,UAAU;IAdzB,uBAAAL,MAAA,QAAAA,MAAA,MAAAM,MAAA,IAemBC,KAAA,CAAAI,QAAQ,GAAAL,MAAA;IACjBG,WAAW,EAAC,UAAU;IACtBf,KAAK,EAAC,aAAa;IACnBgB,QAAQ,EAAR;iDAHSH,KAAA,CAAAI,QAAQ,E,6BAKnBd,mBAAA,CAAmD;IAA3CQ,IAAI,EAAC,QAAQ;IAACX,KAAK,EAAC;KAAY,IAAE,qB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}